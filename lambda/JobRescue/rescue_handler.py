from calcloud import io
from calcloud import hst
from calcloud import lambda_submit

# XXXXX TODO add memory adjustments based on CONTROL folder and
# ipppssoot.
#
# jobId initial memory allocation should be stored here during
# submission, each subsequent run should increment the retry count
# during rescue which implies required memory when the job is
# re-submitted after placing.
#
# The rescue function should use the job ID to search for job failure
# status and conditionally adjust memory if applicable.

RESCUE_TYPES = ["error", "terminated"]


def lambda_handler(event, context):

    # Decode the S3 event message generated by the message write operation.
    # See S3 docs: https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-content-structure.html
    bucket_name = event["Records"][0]["s3"]["bucket"]["name"]
    message = event["Records"][0]["s3"]["object"]["key"]
    ipst = message.split("-")[-1]
    print(f"received {message} on bucket s3://{bucket_name}")
    assert hst.IPPPSSOOT_RE.match(ipst) or ipst == "all", "Bad ipppssoot value: " + repr(ipst)

    comm = io.get_io_bundle(bucket_name)
    if ipst == "all":
        fail_ipsts = set()
        for type in RESCUE_TYPES:
            ipsts = [msg.split("-")[-1] for msg in comm.messages.list(f"{type}-all")]
            fail_ipsts |= ipsts
        for this in fail_ipsts:
            comm.messages.put(f"rescue-{this}")
            comm.messages.delete("rescue-all")
    else:
        comm.outputs.delete(ipst)
        comm.messages.delete(f"all-{ipst}")
        if comm.inputs.listl(ipst):
            lambda_submit.main(ipst)
